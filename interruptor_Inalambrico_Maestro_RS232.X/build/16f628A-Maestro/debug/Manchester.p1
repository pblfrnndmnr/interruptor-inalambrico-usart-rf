Version 3.2 HI-TECH Software Intermediate Code
[; ;Manchester.h: 13: int Manchester (char cadena_v);
[; ;string.h: 4: typedef int ptrdiff_t;
[; ;string.h: 5: typedef unsigned size_t;
[; ;string.h: 6: typedef unsigned short wchar_t;
[; ;string.h: 9: extern int errno;
[; ;string.h: 22: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 23: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 24: extern void * memset(void *, int, size_t);
[; ;string.h: 35: extern char * strcat(char *, const char *);
[; ;string.h: 36: extern char * strcpy(char *, const char *);
[; ;string.h: 37: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 38: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 39: extern char * strdup(const char *);
[; ;string.h: 40: extern char * strtok(char *, const char *);
[; ;string.h: 43: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 44: extern int strcmp(const char *, const char *);
[; ;string.h: 45: extern int stricmp(const char *, const char *);
[; ;string.h: 46: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 47: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 48: extern void * memchr(const void *, int, size_t);
[; ;string.h: 49: extern size_t strcspn(const char *, const char *);
[; ;string.h: 50: extern char * strpbrk(const char *, const char *);
[; ;string.h: 51: extern size_t strspn(const char *, const char *);
[; ;string.h: 52: extern char * strstr(const char *, const char *);
[; ;string.h: 53: extern char * stristr(const char *, const char *);
[; ;string.h: 54: extern char * strerror(int);
[; ;string.h: 55: extern size_t strlen(const char *);
[; ;string.h: 56: extern char * strchr(const char *, int);
[; ;string.h: 57: extern char * strichr(const char *, int);
[; ;string.h: 58: extern char * strrchr(const char *, int);
[; ;string.h: 59: extern char * strrichr(const char *, int);
"5 Manchester.c
[v _Manchester `(i ~T0 @X0 1 ef1`uc ]
{
[; ;Manchester.c: 5: int Manchester (char cadena_v) {
[e :U _Manchester ]
[v _cadena_v `uc ~T0 @X0 1 r1 ]
[f ]
"11
[v _temporal `i ~T0 @X0 1 a ]
[; ;Manchester.c: 11: int temporal=0;
[e = _temporal -> 0 `i ]
[; ;Manchester.c: 13: for (int i=0; i <=7; i++) {
"13
{
[v _i `i ~T0 @X0 1 a ]
[e = _i -> 0 `i ]
[e $ <= _i -> 7 `i 2  ]
[e $U 3  ]
[e :U 2 ]
{
[; ;Manchester.c: 14: if ((cadena_v&(0x01<<i)) == 0) {
"14
[e $ ! == & -> _cadena_v `i << -> 1 `i _i -> 0 `i 5  ]
{
[; ;Manchester.c: 16: temporal = temporal+ 0b10;
"16
[e = _temporal + _temporal -> 2 `i ]
"18
}
[; ;Manchester.c: 18: }
[e $U 6  ]
"19
[e :U 5 ]
[; ;Manchester.c: 19: else {
{
[; ;Manchester.c: 21: temporal = temporal+ 0b01;
"21
[e = _temporal + _temporal -> 1 `i ]
"24
}
[e :U 6 ]
[; ;Manchester.c: 24: }
[; ;Manchester.c: 25: if (i<=6){
"25
[e $ ! <= _i -> 6 `i 7  ]
{
[; ;Manchester.c: 26: temporal=temporal<<2;
"26
[e = _temporal << _temporal -> 2 `i ]
"27
}
[e :U 7 ]
}
"13
[e ++ _i -> 1 `i ]
[e $ <= _i -> 7 `i 2  ]
[e :U 3 ]
"27
}
[; ;Manchester.c: 27: }}
[; ;Manchester.c: 29: return temporal;
"29
[e ) _temporal ]
[e $UE 1  ]
[; ;Manchester.c: 30: }
"30
[e :UE 1 ]
}
