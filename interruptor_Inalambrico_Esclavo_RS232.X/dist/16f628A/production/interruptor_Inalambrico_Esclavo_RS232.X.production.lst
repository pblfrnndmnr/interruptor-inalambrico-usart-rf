

Microchip Technology PIC PRO Macro Assembler V1.31 build 56723 
                                                                                               Sun Jun  8 19:01:15 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 56723
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	pa_nodes,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     	;# 
    24  0001                     	;# 
    25  0002                     	;# 
    26  0003                     	;# 
    27  0004                     	;# 
    28  0005                     	;# 
    29  0006                     	;# 
    30  000A                     	;# 
    31  000B                     	;# 
    32  000C                     	;# 
    33  000E                     	;# 
    34  000E                     	;# 
    35  000F                     	;# 
    36  0010                     	;# 
    37  0011                     	;# 
    38  0012                     	;# 
    39  0015                     	;# 
    40  0015                     	;# 
    41  0016                     	;# 
    42  0017                     	;# 
    43  0018                     	;# 
    44  0019                     	;# 
    45  001A                     	;# 
    46  001F                     	;# 
    47  0081                     	;# 
    48  0085                     	;# 
    49  0086                     	;# 
    50  008C                     	;# 
    51  008E                     	;# 
    52  0092                     	;# 
    53  0098                     	;# 
    54  0099                     	;# 
    55  009A                     	;# 
    56  009B                     	;# 
    57  009C                     	;# 
    58  009D                     	;# 
    59  009F                     	;# 
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000E                     	;# 
    71  000E                     	;# 
    72  000F                     	;# 
    73  0010                     	;# 
    74  0011                     	;# 
    75  0012                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001F                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  008C                     	;# 
    88  008E                     	;# 
    89  0092                     	;# 
    90  0098                     	;# 
    91  0099                     	;# 
    92  009A                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009F                     	;# 
    97  0000                     	;# 
    98  0001                     	;# 
    99  0002                     	;# 
   100  0003                     	;# 
   101  0004                     	;# 
   102  0005                     	;# 
   103  0006                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000E                     	;# 
   108  000E                     	;# 
   109  000F                     	;# 
   110  0010                     	;# 
   111  0011                     	;# 
   112  0012                     	;# 
   113  0015                     	;# 
   114  0015                     	;# 
   115  0016                     	;# 
   116  0017                     	;# 
   117  0018                     	;# 
   118  0019                     	;# 
   119  001A                     	;# 
   120  001F                     	;# 
   121  0081                     	;# 
   122  0085                     	;# 
   123  0086                     	;# 
   124  008C                     	;# 
   125  008E                     	;# 
   126  0092                     	;# 
   127  0098                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009F                     	;# 
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  000A                     	;# 
   142  000B                     	;# 
   143  000C                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0015                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001F                     	;# 
   158  0081                     	;# 
   159  0085                     	;# 
   160  0086                     	;# 
   161  008C                     	;# 
   162  008E                     	;# 
   163  0092                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009A                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009F                     	;# 
   171  0000                     	;# 
   172  0001                     	;# 
   173  0002                     	;# 
   174  0003                     	;# 
   175  0004                     	;# 
   176  0005                     	;# 
   177  0006                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000E                     	;# 
   182  000E                     	;# 
   183  000F                     	;# 
   184  0010                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0015                     	;# 
   188  0015                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001F                     	;# 
   195  0081                     	;# 
   196  0085                     	;# 
   197  0086                     	;# 
   198  008C                     	;# 
   199  008E                     	;# 
   200  0092                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009F                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  000A                     	;# 
   216  000B                     	;# 
   217  000C                     	;# 
   218  000E                     	;# 
   219  000E                     	;# 
   220  000F                     	;# 
   221  0010                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0015                     	;# 
   225  0015                     	;# 
   226  0016                     	;# 
   227  0017                     	;# 
   228  0018                     	;# 
   229  0019                     	;# 
   230  001A                     	;# 
   231  001F                     	;# 
   232  0081                     	;# 
   233  0085                     	;# 
   234  0086                     	;# 
   235  008C                     	;# 
   236  008E                     	;# 
   237  0092                     	;# 
   238  0098                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009C                     	;# 
   243  009D                     	;# 
   244  009F                     	;# 
   245  0000                     	;# 
   246  0001                     	;# 
   247  0002                     	;# 
   248  0003                     	;# 
   249  0004                     	;# 
   250  0005                     	;# 
   251  0006                     	;# 
   252  000A                     	;# 
   253  000B                     	;# 
   254  000C                     	;# 
   255  000E                     	;# 
   256  000E                     	;# 
   257  000F                     	;# 
   258  0010                     	;# 
   259  0011                     	;# 
   260  0012                     	;# 
   261  0015                     	;# 
   262  0015                     	;# 
   263  0016                     	;# 
   264  0017                     	;# 
   265  0018                     	;# 
   266  0019                     	;# 
   267  001A                     	;# 
   268  001F                     	;# 
   269  0081                     	;# 
   270  0085                     	;# 
   271  0086                     	;# 
   272  008C                     	;# 
   273  008E                     	;# 
   274  0092                     	;# 
   275  0098                     	;# 
   276  0099                     	;# 
   277  009A                     	;# 
   278  009B                     	;# 
   279  009C                     	;# 
   280  009D                     	;# 
   281  009F                     	;# 
   282  001F                     _CMCON	set	31
   283  000B                     _INTCONbits	set	11
   284  000C                     _PIR1bits	set	12
   285  0005                     _PORTA	set	5
   286  0006                     _PORTB	set	6
   287  0006                     _PORTBbits	set	6
   288  001A                     _RCREG	set	26
   289  0018                     _RCSTAbits	set	24
   290  0001                     _TMR0	set	1
   291  0030                     _RB0	set	48
   292  0081                     _OPTION_REGbits	set	129
   293  008E                     _PCONbits	set	142
   294  008C                     _PIE1bits	set	140
   295  0099                     _SPBRG	set	153
   296  0085                     _TRISA	set	133
   297  0086                     _TRISB	set	134
   298  0098                     _TXSTAbits	set	152
   299                           
   300                           	psect	text0
   301  0000                     __ptext0:	
   302                           ; #config settings
   303                           
   304                           
   305                           ;psect for function _getch
   306  0000                     
   307                           	psect	cinit
   308  000D                     start_initialization:	
   309  000D                     __initialization:	
   310                           
   311                           ; Clear objects allocated to COMMON
   312  000D  01F6               	clrf	__pbssCOMMON& (0+127)
   313  000E  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   314                           
   315                           ; Clear objects allocated to BANK0
   316  000F  01CC               	clrf	__pbssBANK0& (0+127)
   317  0010  01CD               	clrf	(__pbssBANK0+1)& (0+127)
   318  0011  01CE               	clrf	(__pbssBANK0+2)& (0+127)
   319  0012  01CF               	clrf	(__pbssBANK0+3)& (0+127)
   320  0013  01D0               	clrf	(__pbssBANK0+4)& (0+127)
   321  0014  01D1               	clrf	(__pbssBANK0+5)& (0+127)
   322  0015  01D2               	clrf	(__pbssBANK0+6)& (0+127)
   323  0016  01D3               	clrf	(__pbssBANK0+7)& (0+127)
   324  0017                     end_of_initialization:	
   325                           ;End of C runtime variable initialization code
   326                           
   327  0017                     __end_of__initialization:	
   328  0017  0183               	clrf	3
   329  0018  2926               	ljmp	_main	;jump to C main() function
   330                           
   331                           	psect	bssCOMMON
   332  0076                     __pbssCOMMON:	
   333  0076                     _indice_de_dato:	
   334  0076                     	ds	1
   335  0077                     _pasaron_20ms:	
   336  0077                     	ds	1
   337                           
   338                           	psect	bssBANK0
   339  004C                     __pbssBANK0:	
   340  004C                     _Bandera_estado_llave:	
   341  004C                     	ds	1
   342  004D                     _recibi_datos:	
   343  004D                     	ds	1
   344  004E                     _cadenarecibida:	
   345  004E                     	ds	6
   346                           
   347                           	psect	cstackCOMMON
   348  0070                     __pcstackCOMMON:	
   349  0070                     ??_getch:	
   350  0070                     ?_ConfigureOscillator:	
   351                           ; 0 bytes @ 0x0
   352                           
   353  0070                     ?_InitApp:	
   354                           ; 0 bytes @ 0x0
   355                           
   356  0070                     ?_configura_USART:	
   357                           ; 0 bytes @ 0x0
   358                           
   359  0070                     ?_isr:	
   360                           ; 0 bytes @ 0x0
   361                           
   362  0070                     ??_isr:	
   363                           ; 0 bytes @ 0x0
   364                           
   365  0070                     ?_main:	
   366                           ; 0 bytes @ 0x0
   367                           
   368  0070                     ?_getch:	
   369                           ; 0 bytes @ 0x0
   370                           
   371                           
   372                           ; 1 bytes @ 0x0
   373  0070                     	ds	5
   374  0075                     isr@datosrecibidos:	
   375                           
   376                           ; 1 bytes @ 0x5
   377  0075                     	ds	1
   378  0076                     ??_ConfigureOscillator:	
   379  0076                     ??_InitApp:	
   380                           ; 0 bytes @ 0x6
   381                           
   382  0076                     ??_configura_USART:	
   383                           ; 0 bytes @ 0x6
   384                           
   385  0076                     ??_calcula_mensaje_crc:	
   386                           ; 0 bytes @ 0x6
   387                           
   388  0076                     ??_strlen:	
   389                           ; 0 bytes @ 0x6
   390                           
   391  0076                     ??_CRC16:	
   392                           ; 0 bytes @ 0x6
   393                           
   394                           
   395                           	psect	cstackBANK0
   396  0020                     __pcstackBANK0:	
   397                           ; 0 bytes @ 0x6
   398                           
   399  0020                     ?_strlen:	
   400  0020                     ?_CRC16:	
   401                           ; 2 bytes @ 0x0
   402                           
   403  0020                     CRC16@poly:	
   404                           ; 4 bytes @ 0x0
   405                           
   406                           
   407                           ; 4 bytes @ 0x0
   408  0020                     	ds	3
   409  0023                     strlen@s:	
   410                           
   411                           ; 1 bytes @ 0x3
   412  0023                     	ds	1
   413  0024                     strlen@cp:	
   414  0024                     CRC16@init_value:	
   415                           ; 1 bytes @ 0x4
   416                           
   417                           
   418                           ; 4 bytes @ 0x4
   419  0024                     	ds	4
   420  0028                     CRC16@exit_value:	
   421                           
   422                           ; 4 bytes @ 0x8
   423  0028                     	ds	4
   424  002C                     CRC16@value:	
   425                           
   426                           ; 1 bytes @ 0xC
   427  002C                     	ds	1
   428  002D                     CRC16@i:	
   429                           
   430                           ; 4 bytes @ 0xD
   431  002D                     	ds	4
   432  0031                     CRC16@res:	
   433                           
   434                           ; 4 bytes @ 0x11
   435  0031                     	ds	4
   436  0035                     ?_calcula_CRC16:	
   437  0035                     calcula_CRC16@polinomio:	
   438                           ; 2 bytes @ 0x15
   439                           
   440                           
   441                           ; 4 bytes @ 0x15
   442  0035                     	ds	4
   443  0039                     calcula_CRC16@inival:	
   444                           
   445                           ; 4 bytes @ 0x19
   446  0039                     	ds	4
   447  003D                     ??_calcula_CRC16:	
   448                           
   449                           ; 0 bytes @ 0x1D
   450  003D                     	ds	2
   451  003F                     calcula_CRC16@aux:	
   452                           
   453                           ; 2 bytes @ 0x1F
   454  003F                     	ds	2
   455  0041                     calcula_CRC16@i:	
   456                           
   457                           ; 2 bytes @ 0x21
   458  0041                     	ds	2
   459  0043                     calcula_CRC16@datos:	
   460                           
   461                           ; 1 bytes @ 0x23
   462  0043                     	ds	1
   463  0044                     ?_calcula_mensaje_crc:	
   464                           
   465                           ; 2 bytes @ 0x24
   466  0044                     	ds	3
   467  0047                     calcula_mensaje_crc@CRC:	
   468                           
   469                           ; 2 bytes @ 0x27
   470  0047                     	ds	2
   471  0049                     calcula_mensaje_crc@packet_ptr:	
   472                           
   473                           ; 1 bytes @ 0x29
   474  0049                     	ds	1
   475  004A                     ??_main:	
   476                           
   477                           ; 0 bytes @ 0x2A
   478  004A                     	ds	2
   479                           
   480                           	psect	maintext
   481  0126                     __pmaintext:	
   482 ;;
   483 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   484 ;;
   485 ;; *************** function _main *****************
   486 ;; Defined at:
   487 ;;		line 55 in file "main.c"
   488 ;; Parameters:    Size  Location     Type
   489 ;;		None
   490 ;; Auto vars:     Size  Location     Type
   491 ;;		None
   492 ;; Return value:  Size  Location     Type
   493 ;;		None               void
   494 ;; Registers used:
   495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   496 ;; Tracked objects:
   497 ;;		On entry : 17F/0
   498 ;;		On exit  : 160/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   501 ;;      Params:         0       0       0       0
   502 ;;      Locals:         0       0       0       0
   503 ;;      Temps:          0       2       0       0
   504 ;;      Totals:         0       2       0       0
   505 ;;Total ram usage:        2 bytes
   506 ;; Hardware stack levels required when called:    5
   507 ;; This function calls:
   508 ;;		_ConfigureOscillator
   509 ;;		_InitApp
   510 ;;		_calcula_mensaje_crc
   511 ;;		_configura_USART
   512 ;; This function is called by:
   513 ;;		Startup code after reset
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           
   518                           ;psect for function _main
   519  0126                     _main:	
   520                           
   521                           ;main.c: 59: ConfigureOscillator();
   522                           
   523                           ;incstack = 0
   524                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   525  0126  2199               	fcall	_ConfigureOscillator
   526                           
   527                           ;main.c: 60: _delay((unsigned long)((20)*(20000000UL/4000.0)));
   528  0127  3082               	movlw	130
   529  0128  1283               	bcf	3,5	;RP0=0, select bank0
   530  0129  00CB               	movwf	??_main+1
   531  012A  30DD               	movlw	221
   532  012B  00CA               	movwf	??_main
   533  012C                     u447:	
   534  012C  0BCA               	decfsz	??_main,f
   535  012D  292C               	goto	u447
   536  012E  0BCB               	decfsz	??_main+1,f
   537  012F  292C               	goto	u447
   538  0130  2931               	nop2
   539                           
   540                           ;main.c: 62: InitApp();
   541  0131  2147               	fcall	_InitApp
   542                           
   543                           ;main.c: 64: configura_USART ();
   544  0132  218F               	fcall	_configura_USART
   545  0133                     l1224:	
   546                           
   547                           ;main.c: 69: {
   548                           ;main.c: 71: if (Bandera_estado_llave){
   549  0133  084C               	movf	_Bandera_estado_llave,w
   550  0134  1903               	btfsc	3,2
   551  0135  2939               	goto	l1230
   552  0136  3008               	movlw	8
   553                           
   554                           ;main.c: 72: Bandera_estado_llave=0;
   555  0137  01CC               	clrf	_Bandera_estado_llave
   556                           
   557                           ;main.c: 73: PORTBbits.RB3=~PORTBbits.RB3;
   558  0138  0686               	xorwf	6,f	;volatile
   559  0139                     l1230:	
   560                           
   561                           ;main.c: 74: }
   562                           ;main.c: 75: if (recibi_datos){
   563  0139  084D               	movf	_recibi_datos,w
   564  013A  1903               	btfsc	3,2
   565  013B  2933               	goto	l1224
   566  013C  304E               	movlw	_cadenarecibida& (0+255)
   567                           
   568                           ;main.c: 77: recibi_datos=0;
   569  013D  01CD               	clrf	_recibi_datos
   570                           
   571                           ;main.c: 78: indice_de_dato=0;
   572  013E  01F6               	clrf	_indice_de_dato
   573                           
   574                           ;main.c: 80: if (calcula_mensaje_crc(cadenarecibida)==0){
   575  013F  2168               	fcall	_calcula_mensaje_crc
   576  0140  0845               	movf	?_calcula_mensaje_crc+1,w
   577  0141  0444               	iorwf	?_calcula_mensaje_crc,w
   578  0142  1D03               	skipz
   579  0143  2933               	goto	l1224
   580                           
   581                           ;main.c: 81: PORTBbits.RB3=~PORTBbits.RB3;
   582  0144  3008               	movlw	8
   583  0145  0686               	xorwf	6,f	;volatile
   584  0146  2933               	goto	l1224
   585  0147                     __end_of_main:	
   586                           
   587                           	psect	text1
   588  018F                     __ptext1:	
   589 ;; *************** function _configura_USART *****************
   590 ;; Defined at:
   591 ;;		line 14 in file "usart1.c"
   592 ;; Parameters:    Size  Location     Type
   593 ;;		None
   594 ;; Auto vars:     Size  Location     Type
   595 ;;		None
   596 ;; Return value:  Size  Location     Type
   597 ;;		None               void
   598 ;; Registers used:
   599 ;;		wreg
   600 ;; Tracked objects:
   601 ;;		On entry : 60/20
   602 ;;		On exit  : 60/0
   603 ;;		Unchanged: 0/0
   604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   605 ;;      Params:         0       0       0       0
   606 ;;      Locals:         0       0       0       0
   607 ;;      Temps:          0       0       0       0
   608 ;;      Totals:         0       0       0       0
   609 ;;Total ram usage:        0 bytes
   610 ;; Hardware stack levels used:    1
   611 ;; Hardware stack levels required when called:    2
   612 ;; This function calls:
   613 ;;		Nothing
   614 ;; This function is called by:
   615 ;;		_main
   616 ;; This function uses a non-reentrant model
   617 ;;
   618                           
   619                           
   620                           ;psect for function _configura_USART
   621  018F                     _configura_USART:	
   622                           
   623                           ;usart1.c: 28: SPBRG= 20000000UL/64/2400-1;
   624                           
   625                           ;incstack = 0
   626                           ; Regs used in _configura_USART: [wreg]
   627  018F  3081               	movlw	129
   628  0190  0099               	movwf	25	;volatile
   629                           
   630                           ;usart1.c: 39: RCSTAbits.RX9=0;
   631  0191  1283               	bcf	3,5	;RP0=0, select bank0
   632  0192  1318               	bcf	24,6	;volatile
   633                           
   634                           ;usart1.c: 40: TXSTAbits.SYNC=0;
   635  0193  1683               	bsf	3,5	;RP0=1, select bank1
   636  0194  1218               	bcf	24,4	;volatile
   637                           
   638                           ;usart1.c: 58: RCSTAbits.CREN=1;
   639  0195  1283               	bcf	3,5	;RP0=0, select bank0
   640  0196  1618               	bsf	24,4	;volatile
   641                           
   642                           ;usart1.c: 59: RCSTAbits.SPEN=1;
   643  0197  1798               	bsf	24,7	;volatile
   644  0198  0008               	return
   645  0199                     __end_of_configura_USART:	
   646                           
   647                           	psect	text2
   648  0168                     __ptext2:	
   649 ;; *************** function _calcula_mensaje_crc *****************
   650 ;; Defined at:
   651 ;;		line 69 in file "uso_crc_maestro.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;  packet_ptr      1    wreg     PTR unsigned char 
   654 ;;		 -> cadenarecibida(6), 
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  packet_ptr      1   41[BANK0 ] PTR unsigned char 
   657 ;;		 -> cadenarecibida(6), 
   658 ;;  CRC             2   39[BANK0 ] unsigned int 
   659 ;; Return value:  Size  Location     Type
   660 ;;                  2   36[BANK0 ] int 
   661 ;; Registers used:
   662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   663 ;; Tracked objects:
   664 ;;		On entry : 60/0
   665 ;;		On exit  : 160/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   668 ;;      Params:         0       3       0       0
   669 ;;      Locals:         0       3       0       0
   670 ;;      Temps:          0       0       0       0
   671 ;;      Totals:         0       6       0       0
   672 ;;Total ram usage:        6 bytes
   673 ;; Hardware stack levels used:    1
   674 ;; Hardware stack levels required when called:    4
   675 ;; This function calls:
   676 ;;		_calcula_CRC16
   677 ;; This function is called by:
   678 ;;		_main
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           
   683                           ;psect for function _calcula_mensaje_crc
   684  0168                     _calcula_mensaje_crc:	
   685                           
   686                           ;incstack = 0
   687                           ; Regs used in _calcula_mensaje_crc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   688                           ;calcula_mensaje_crc@packet_ptr stored from wreg
   689  0168  00C9               	movwf	calcula_mensaje_crc@packet_ptr
   690                           
   691                           ;uso_crc_maestro.c: 72: unsigned int CRC;
   692                           ;uso_crc_maestro.c: 75: CRC=calcula_CRC16(packet_ptr,0xA001,0x0000);
   693  0169  30A0               	movlw	160
   694  016A  01B8               	clrf	calcula_CRC16@polinomio+3
   695  016B  01B7               	clrf	calcula_CRC16@polinomio+2
   696  016C  00B6               	movwf	calcula_CRC16@polinomio+1
   697  016D  3001               	movlw	1
   698  016E  00B5               	movwf	calcula_CRC16@polinomio
   699  016F  01B9               	clrf	calcula_CRC16@inival
   700  0170  01BA               	clrf	calcula_CRC16@inival+1
   701  0171  01BB               	clrf	calcula_CRC16@inival+2
   702  0172  01BC               	clrf	calcula_CRC16@inival+3
   703  0173  0849               	movf	calcula_mensaje_crc@packet_ptr,w
   704  0174  2019               	fcall	_calcula_CRC16
   705  0175  0836               	movf	?_calcula_CRC16+1,w
   706  0176  00C8               	movwf	calcula_mensaje_crc@CRC+1
   707  0177  0835               	movf	?_calcula_CRC16,w
   708  0178  00C7               	movwf	calcula_mensaje_crc@CRC
   709                           
   710                           ;uso_crc_maestro.c: 77: return CRC;
   711  0179  0848               	movf	calcula_mensaje_crc@CRC+1,w
   712  017A  00C5               	movwf	?_calcula_mensaje_crc+1
   713  017B  0847               	movf	calcula_mensaje_crc@CRC,w
   714  017C  00C4               	movwf	?_calcula_mensaje_crc
   715  017D  0008               	return
   716  017E                     __end_of_calcula_mensaje_crc:	
   717                           
   718                           	psect	text3
   719  0019                     __ptext3:	
   720 ;; *************** function _calcula_CRC16 *****************
   721 ;; Defined at:
   722 ;;		line 124 in file "uso_crc_maestro.c"
   723 ;; Parameters:    Size  Location     Type
   724 ;;  datos           1    wreg     PTR unsigned char 
   725 ;;		 -> cadenarecibida(6), 
   726 ;;  polinomio       4   21[BANK0 ] long 
   727 ;;  inival          4   25[BANK0 ] long 
   728 ;; Auto vars:     Size  Location     Type
   729 ;;  datos           1   35[BANK0 ] PTR unsigned char 
   730 ;;		 -> cadenarecibida(6), 
   731 ;;  aux             2   31[BANK0 ] unsigned int 
   732 ;;  i               2   33[BANK0 ] int 
   733 ;; Return value:  Size  Location     Type
   734 ;;                  2   21[BANK0 ] int 
   735 ;; Registers used:
   736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   737 ;; Tracked objects:
   738 ;;		On entry : 60/0
   739 ;;		On exit  : 160/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   742 ;;      Params:         0       8       0       0
   743 ;;      Locals:         0       5       0       0
   744 ;;      Temps:          0       2       0       0
   745 ;;      Totals:         0      15       0       0
   746 ;;Total ram usage:       15 bytes
   747 ;; Hardware stack levels used:    1
   748 ;; Hardware stack levels required when called:    3
   749 ;; This function calls:
   750 ;;		_CRC16
   751 ;;		_strlen
   752 ;; This function is called by:
   753 ;;		_calcula_mensaje_crc
   754 ;; This function uses a non-reentrant model
   755 ;;
   756                           
   757                           
   758                           ;psect for function _calcula_CRC16
   759  0019                     _calcula_CRC16:	
   760                           
   761                           ;incstack = 0
   762                           ; Regs used in _calcula_CRC16: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   763                           ;calcula_CRC16@datos stored from wreg
   764  0019  00C3               	movwf	calcula_CRC16@datos
   765                           
   766                           ;uso_crc_maestro.c: 127: int i;
   767                           ;uso_crc_maestro.c: 129: for(i=0;i<strlen(datos);i++){
   768  001A  01C1               	clrf	calcula_CRC16@i
   769  001B  01C2               	clrf	calcula_CRC16@i+1
   770  001C                     l1182:	
   771  001C  0843               	movf	calcula_CRC16@datos,w
   772  001D  217E               	fcall	_strlen
   773  001E  0821               	movf	?_strlen+1,w
   774  001F  0242               	subwf	calcula_CRC16@i+1,w
   775  0020  1D03               	skipz
   776  0021  2824               	goto	u405
   777  0022  0820               	movf	?_strlen,w
   778  0023  0241               	subwf	calcula_CRC16@i,w
   779  0024                     u405:	
   780                           
   781                           ;uso_crc_maestro.c: 130: inival=CRC16(datos[i],polinomio,inival,0x0000);
   782  0024  0838               	movf	calcula_CRC16@polinomio+3,w
   783  0025  1803               	btfsc	3,0
   784  0026  2860               	goto	L1
   785  0027  00A3               	movwf	CRC16@poly+3
   786  0028  0837               	movf	calcula_CRC16@polinomio+2,w
   787  0029  00A2               	movwf	CRC16@poly+2
   788  002A  0836               	movf	calcula_CRC16@polinomio+1,w
   789  002B  00A1               	movwf	CRC16@poly+1
   790  002C  0835               	movf	calcula_CRC16@polinomio,w
   791  002D  00A0               	movwf	CRC16@poly
   792  002E  083C               	movf	calcula_CRC16@inival+3,w
   793  002F  00A7               	movwf	CRC16@init_value+3
   794  0030  083B               	movf	calcula_CRC16@inival+2,w
   795  0031  00A6               	movwf	CRC16@init_value+2
   796  0032  083A               	movf	calcula_CRC16@inival+1,w
   797  0033  00A5               	movwf	CRC16@init_value+1
   798  0034  0839               	movf	calcula_CRC16@inival,w
   799  0035  00A4               	movwf	CRC16@init_value
   800  0036  01A8               	clrf	CRC16@exit_value
   801  0037  01A9               	clrf	CRC16@exit_value+1
   802  0038  01AA               	clrf	CRC16@exit_value+2
   803  0039  01AB               	clrf	CRC16@exit_value+3
   804  003A  0841               	movf	calcula_CRC16@i,w
   805  003B  0743               	addwf	calcula_CRC16@datos,w
   806  003C  00BD               	movwf	??_calcula_CRC16
   807  003D  0084               	movwf	4
   808  003E  0800               	movf	0,w
   809  003F  20D5               	fcall	_CRC16
   810  0040  0823               	movf	?_CRC16+3,w
   811  0041  00BC               	movwf	calcula_CRC16@inival+3
   812  0042  0822               	movf	?_CRC16+2,w
   813  0043  00BB               	movwf	calcula_CRC16@inival+2
   814  0044  0821               	movf	?_CRC16+1,w
   815  0045  00BA               	movwf	calcula_CRC16@inival+1
   816  0046  0820               	movf	?_CRC16,w
   817  0047  00B9               	movwf	calcula_CRC16@inival
   818  0048  0AC1               	incf	calcula_CRC16@i,f
   819  0049  1903               	skipnz
   820  004A  0AC2               	incf	calcula_CRC16@i+1,f
   821  004B  281C               	goto	l1182
   822  004C                     l1184:	
   823                           
   824                           ;uso_crc_maestro.c: 134: inival^=0xFFFF;
   825  004C  30FF               	movlw	255
   826  004D  06B9               	xorwf	calcula_CRC16@inival,f
   827  004E  06BA               	xorwf	calcula_CRC16@inival+1,f
   828                           
   829                           ;uso_crc_maestro.c: 135: unsigned int aux;
   830                           ;uso_crc_maestro.c: 136: aux=(unsigned int)inival;
   831  004F  083A               	movf	calcula_CRC16@inival+1,w
   832  0050  00C0               	movwf	calcula_CRC16@aux+1
   833  0051  0839               	movf	calcula_CRC16@inival,w
   834  0052  00BF               	movwf	calcula_CRC16@aux
   835                           
   836                           ;uso_crc_maestro.c: 137: inival=(long)((aux<<8)+(aux>>8));
   837  0053  00BE               	movwf	??_calcula_CRC16+1
   838  0054  01BD               	clrf	??_calcula_CRC16
   839  0055  0840               	movf	calcula_CRC16@aux+1,w
   840  0056  073D               	addwf	??_calcula_CRC16,w
   841  0057  00B9               	movwf	calcula_CRC16@inival
   842  0058  3000               	movlw	0
   843  0059  1803               	skipnc
   844  005A  3001               	movlw	1
   845  005B  073E               	addwf	??_calcula_CRC16+1,w
   846  005C  00BA               	movwf	calcula_CRC16@inival+1
   847  005D  01BB               	clrf	calcula_CRC16@inival+2
   848  005E  01BC               	clrf	calcula_CRC16@inival+3
   849                           
   850                           ;uso_crc_maestro.c: 139: break;
   851  005F  2873               	goto	l1192
   852  0060                     L1:	
   853                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
   854                           ; Switch size 1, requested type "speed"
   855                           ; Number of cases is 1, Range of values is 0 to 0
   856                           ; switch strategies available:
   857                           ; Name         Instructions Cycles
   858                           ; simple_byte            4     3 (average)
   859                           ; direct_byte            7     6 (fixed)
   860                           ; jumptable            260     6 (fixed)
   861                           ;	Chosen strategy is simple_byte
   862                           
   863  0060  3A00               	xorlw	0	; case 0
   864  0061  1903               	skipnz
   865  0062  286E               	goto	l1330
   866  0063  2873               	goto	l1192
   867  0064                     l1328:	
   868                           
   869                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   870                           ; Switch size 1, requested type "speed"
   871                           ; Number of cases is 1, Range of values is 166 to 166
   872                           ; switch strategies available:
   873                           ; Name         Instructions Cycles
   874                           ; simple_byte            4     3 (average)
   875                           ; direct_byte           10     9 (fixed)
   876                           ; jumptable            263     9 (fixed)
   877                           ;	Chosen strategy is simple_byte
   878  0064  0836               	movf	calcula_CRC16@polinomio+1,w
   879  0065  3AA6               	xorlw	166	; case 166
   880  0066  1903               	skipnz
   881  0067  2869               	goto	l1332
   882  0068  2873               	goto	l1192
   883  0069                     l1332:	
   884                           
   885                           ; Switch size 1, requested type "speed"
   886                           ; Number of cases is 1, Range of values is 188 to 188
   887                           ; switch strategies available:
   888                           ; Name         Instructions Cycles
   889                           ; simple_byte            4     3 (average)
   890                           ; direct_byte           10     9 (fixed)
   891                           ; jumptable            263     9 (fixed)
   892                           ;	Chosen strategy is simple_byte
   893  0069  0835               	movf	calcula_CRC16@polinomio,w
   894  006A  3ABC               	xorlw	188	; case 188
   895  006B  1903               	skipnz
   896  006C  284C               	goto	l1184
   897  006D  2873               	goto	l1192
   898  006E                     l1330:	
   899                           
   900                           ; Switch size 1, requested type "speed"
   901                           ; Number of cases is 1, Range of values is 0 to 0
   902                           ; switch strategies available:
   903                           ; Name         Instructions Cycles
   904                           ; simple_byte            4     3 (average)
   905                           ; direct_byte            7     6 (fixed)
   906                           ; jumptable            260     6 (fixed)
   907                           ;	Chosen strategy is simple_byte
   908  006E  0837               	movf	calcula_CRC16@polinomio+2,w
   909  006F  3A00               	xorlw	0	; case 0
   910  0070  1903               	skipnz
   911  0071  2864               	goto	l1328
   912  0072  2873               	goto	l1192
   913  0073                     l1192:	
   914                           
   915                           ;uso_crc_maestro.c: 145: return inival;
   916  0073  083A               	movf	calcula_CRC16@inival+1,w
   917  0074  00B6               	movwf	?_calcula_CRC16+1
   918  0075  0839               	movf	calcula_CRC16@inival,w
   919  0076  00B5               	movwf	?_calcula_CRC16
   920  0077  0008               	return
   921  0078                     __end_of_calcula_CRC16:	
   922                           
   923                           	psect	text4
   924  017E                     __ptext4:	
   925 ;; *************** function _strlen *****************
   926 ;; Defined at:
   927 ;;		line 4 in file "/opt/microchip/xc8/v1.31/sources/common/strlen.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;  s               1    wreg     PTR const unsigned char 
   930 ;;		 -> cadenarecibida(6), 
   931 ;; Auto vars:     Size  Location     Type
   932 ;;  s               1    3[BANK0 ] PTR const unsigned char 
   933 ;;		 -> cadenarecibida(6), 
   934 ;;  cp              1    4[BANK0 ] PTR const unsigned char 
   935 ;;		 -> cadenarecibida(6), 
   936 ;; Return value:  Size  Location     Type
   937 ;;                  2    0[BANK0 ] unsigned int 
   938 ;; Registers used:
   939 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   940 ;; Tracked objects:
   941 ;;		On entry : 60/0
   942 ;;		On exit  : 160/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   945 ;;      Params:         0       3       0       0
   946 ;;      Locals:         0       2       0       0
   947 ;;      Temps:          0       0       0       0
   948 ;;      Totals:         0       5       0       0
   949 ;;Total ram usage:        5 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; Hardware stack levels required when called:    2
   952 ;; This function calls:
   953 ;;		Nothing
   954 ;; This function is called by:
   955 ;;		_calcula_CRC16
   956 ;; This function uses a non-reentrant model
   957 ;;
   958                           
   959                           
   960                           ;psect for function _strlen
   961  017E                     _strlen:	
   962                           
   963                           ;incstack = 0
   964                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
   965                           ;strlen@s stored from wreg
   966  017E  00A3               	movwf	strlen@s
   967  017F  00A4               	movwf	strlen@cp
   968  0180                     l1170:	
   969  0180  0824               	movf	strlen@cp,w
   970  0181  0084               	movwf	4
   971  0182  1383               	bcf	3,7	;select IRP bank0
   972  0183  0880               	movf	0,f
   973  0184  1903               	btfsc	3,2
   974  0185  2988               	goto	l1172
   975  0186  0AA4               	incf	strlen@cp,f
   976  0187  2980               	goto	l1170
   977  0188                     l1172:	
   978  0188  0823               	movf	strlen@s,w
   979  0189  0224               	subwf	strlen@cp,w
   980  018A  00A0               	movwf	?_strlen
   981  018B  01A1               	clrf	?_strlen+1
   982  018C  1BA0               	btfsc	?_strlen,7
   983  018D  03A1               	decf	?_strlen+1,f
   984  018E  0008               	return
   985  018F                     __end_of_strlen:	
   986                           
   987                           	psect	text5
   988  00D5                     __ptext5:	
   989 ;; *************** function _CRC16 *****************
   990 ;; Defined at:
   991 ;;		line 104 in file "uso_crc_maestro.c"
   992 ;; Parameters:    Size  Location     Type
   993 ;;  value           1    wreg     unsigned char 
   994 ;;  poly            4    0[BANK0 ] long 
   995 ;;  init_value      4    4[BANK0 ] long 
   996 ;;  exit_value      4    8[BANK0 ] long 
   997 ;; Auto vars:     Size  Location     Type
   998 ;;  value           1   12[BANK0 ] unsigned char 
   999 ;;  res             4   17[BANK0 ] long 
  1000 ;;  i               4   13[BANK0 ] long 
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  4    0[BANK0 ] long 
  1003 ;; Registers used:
  1004 ;;		wreg, status,2, status,0, btemp+1
  1005 ;; Tracked objects:
  1006 ;;		On entry : 160/0
  1007 ;;		On exit  : 160/0
  1008 ;;		Unchanged: 100/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1010 ;;      Params:         0      12       0       0
  1011 ;;      Locals:         0       9       0       0
  1012 ;;      Temps:          0       0       0       0
  1013 ;;      Totals:         0      21       0       0
  1014 ;;Total ram usage:       21 bytes
  1015 ;; Hardware stack levels used:    1
  1016 ;; Hardware stack levels required when called:    2
  1017 ;; This function calls:
  1018 ;;		Nothing
  1019 ;; This function is called by:
  1020 ;;		_calcula_CRC16
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           
  1025                           ;psect for function _CRC16
  1026  00D5                     _CRC16:	
  1027                           
  1028                           ;incstack = 0
  1029                           ; Regs used in _CRC16: [wreg+status,2+status,0+btemp+1]
  1030                           ;CRC16@value stored from wreg
  1031  00D5  00AC               	movwf	CRC16@value
  1032                           
  1033                           ;uso_crc_maestro.c: 105: long res;
  1034                           ;uso_crc_maestro.c: 106: long i;
  1035                           ;uso_crc_maestro.c: 108: res=value;
  1036  00D6  00B1               	movwf	CRC16@res
  1037  00D7  01B2               	clrf	CRC16@res+1
  1038  00D8  01B3               	clrf	CRC16@res+2
  1039  00D9  01B4               	clrf	CRC16@res+3
  1040                           
  1041                           ;uso_crc_maestro.c: 110: res^=init_value;
  1042  00DA  0824               	movf	CRC16@init_value,w
  1043  00DB  06B1               	xorwf	CRC16@res,f
  1044  00DC  0825               	movf	CRC16@init_value+1,w
  1045  00DD  06B2               	xorwf	CRC16@res+1,f
  1046  00DE  0826               	movf	CRC16@init_value+2,w
  1047  00DF  06B3               	xorwf	CRC16@res+2,f
  1048  00E0  0827               	movf	CRC16@init_value+3,w
  1049  00E1  06B4               	xorwf	CRC16@res+3,f
  1050                           
  1051                           ;uso_crc_maestro.c: 112: for(i=0;i<8;i++){
  1052  00E2  01AD               	clrf	CRC16@i
  1053  00E3  01AE               	clrf	CRC16@i+1
  1054  00E4  01AF               	clrf	CRC16@i+2
  1055  00E5  01B0               	clrf	CRC16@i+3
  1056  00E6                     l155:	
  1057                           
  1058                           ;uso_crc_maestro.c: 113: if(res & 1){
  1059  00E6  1C31               	btfss	CRC16@res,0
  1060  00E7  28F6               	goto	l902
  1061                           
  1062                           ;uso_crc_maestro.c: 114: res>>= 1;
  1063  00E8  0D34               	rlf	CRC16@res+3,w
  1064  00E9  0CB4               	rrf	CRC16@res+3,f
  1065  00EA  0CB3               	rrf	CRC16@res+2,f
  1066  00EB  0CB2               	rrf	CRC16@res+1,f
  1067  00EC  0CB1               	rrf	CRC16@res,f
  1068                           
  1069                           ;uso_crc_maestro.c: 115: res^=poly;
  1070  00ED  0820               	movf	CRC16@poly,w
  1071  00EE  06B1               	xorwf	CRC16@res,f
  1072  00EF  0821               	movf	CRC16@poly+1,w
  1073  00F0  06B2               	xorwf	CRC16@res+1,f
  1074  00F1  0822               	movf	CRC16@poly+2,w
  1075  00F2  06B3               	xorwf	CRC16@res+2,f
  1076  00F3  0823               	movf	CRC16@poly+3,w
  1077  00F4  06B4               	xorwf	CRC16@res+3,f
  1078                           
  1079                           ;uso_crc_maestro.c: 116: }else{
  1080  00F5  28FB               	goto	l904
  1081  00F6                     l902:	
  1082                           
  1083                           ;uso_crc_maestro.c: 117: res>>= 1;
  1084  00F6  0D34               	rlf	CRC16@res+3,w
  1085  00F7  0CB4               	rrf	CRC16@res+3,f
  1086  00F8  0CB3               	rrf	CRC16@res+2,f
  1087  00F9  0CB2               	rrf	CRC16@res+1,f
  1088  00FA  0CB1               	rrf	CRC16@res,f
  1089  00FB                     l904:	
  1090  00FB  0AAD               	incf	CRC16@i,f
  1091  00FC  1903               	skipnz
  1092  00FD  0AAE               	incf	CRC16@i+1,f
  1093  00FE  1903               	skipnz
  1094  00FF  0AAF               	incf	CRC16@i+2,f
  1095  0100  1903               	skipnz
  1096  0101  0AB0               	incf	CRC16@i+3,f
  1097  0102  0830               	movf	CRC16@i+3,w
  1098  0103  3A80               	xorlw	128
  1099  0104  00FF               	movwf	127
  1100  0105  3080               	movlw	128
  1101  0106  027F               	subwf	127,w
  1102  0107  1D03               	skipz
  1103  0108  2913               	goto	u213
  1104  0109  3000               	movlw	0
  1105  010A  022F               	subwf	CRC16@i+2,w
  1106  010B  1D03               	skipz
  1107  010C  2913               	goto	u213
  1108  010D  3000               	movlw	0
  1109  010E  022E               	subwf	CRC16@i+1,w
  1110  010F  1D03               	skipz
  1111  0110  2913               	goto	u213
  1112  0111  3008               	movlw	8
  1113  0112  022D               	subwf	CRC16@i,w
  1114  0113                     u213:	
  1115  0113  1C03               	skipc
  1116  0114  28E6               	goto	l155
  1117                           
  1118                           ;uso_crc_maestro.c: 118: }
  1119                           ;uso_crc_maestro.c: 119: }
  1120                           ;uso_crc_maestro.c: 120: res^=exit_value;
  1121  0115  0828               	movf	CRC16@exit_value,w
  1122  0116  06B1               	xorwf	CRC16@res,f
  1123  0117  0829               	movf	CRC16@exit_value+1,w
  1124  0118  06B2               	xorwf	CRC16@res+1,f
  1125  0119  082A               	movf	CRC16@exit_value+2,w
  1126  011A  06B3               	xorwf	CRC16@res+2,f
  1127  011B  082B               	movf	CRC16@exit_value+3,w
  1128  011C  06B4               	xorwf	CRC16@res+3,f
  1129                           
  1130                           ;uso_crc_maestro.c: 121: return res;
  1131  011D  0834               	movf	CRC16@res+3,w
  1132  011E  00A3               	movwf	?_CRC16+3
  1133  011F  0833               	movf	CRC16@res+2,w
  1134  0120  00A2               	movwf	?_CRC16+2
  1135  0121  0832               	movf	CRC16@res+1,w
  1136  0122  00A1               	movwf	?_CRC16+1
  1137  0123  0831               	movf	CRC16@res,w
  1138  0124  00A0               	movwf	?_CRC16
  1139  0125  0008               	return
  1140  0126                     __end_of_CRC16:	
  1141                           
  1142                           	psect	text6
  1143  0147                     __ptext6:	
  1144 ;; *************** function _InitApp *****************
  1145 ;; Defined at:
  1146 ;;		line 22 in file "user.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;		None
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;		None
  1151 ;; Return value:  Size  Location     Type
  1152 ;;		None               void
  1153 ;; Registers used:
  1154 ;;		wreg, status,2, status,0
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/20
  1157 ;;		On exit  : 60/20
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1160 ;;      Params:         0       0       0       0
  1161 ;;      Locals:         0       0       0       0
  1162 ;;      Temps:          0       0       0       0
  1163 ;;      Totals:         0       0       0       0
  1164 ;;Total ram usage:        0 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; Hardware stack levels required when called:    2
  1167 ;; This function calls:
  1168 ;;		Nothing
  1169 ;; This function is called by:
  1170 ;;		_main
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           
  1175                           ;psect for function _InitApp
  1176  0147                     _InitApp:	
  1177                           
  1178                           ;user.c: 26: PORTB=0b00000000;
  1179                           
  1180                           ;incstack = 0
  1181                           ; Regs used in _InitApp: [wreg+status,2+status,0]
  1182  0147  1283               	bcf	3,5	;RP0=0, select bank0
  1183  0148  1303               	bcf	3,6	;RP1=0, select bank0
  1184  0149  0186               	clrf	6	;volatile
  1185                           
  1186                           ;user.c: 28: PORTA=0b00000000;
  1187  014A  0185               	clrf	5	;volatile
  1188                           
  1189                           ;user.c: 34: TRISB=0b00000011;
  1190  014B  3003               	movlw	3
  1191  014C  1683               	bsf	3,5	;RP0=1, select bank1
  1192  014D  0086               	movwf	6	;volatile
  1193                           
  1194                           ;user.c: 35: CMCON=0x00000111;
  1195  014E  3011               	movlw	17
  1196  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1197  0150  009F               	movwf	31	;volatile
  1198                           
  1199                           ;user.c: 37: TRISA=0b00000000;
  1200  0151  1683               	bsf	3,5	;RP0=1, select bank1
  1201  0152  0185               	clrf	5	;volatile
  1202                           
  1203                           ;user.c: 46: OPTION_REGbits.PS=0b111;
  1204  0153  3007               	movlw	7
  1205  0154  0481               	iorwf	1,f	;volatile
  1206                           
  1207                           ;user.c: 47: OPTION_REGbits.PSA=0;
  1208  0155  1181               	bcf	1,3	;volatile
  1209                           
  1210                           ;user.c: 48: OPTION_REGbits.T0CS=0;
  1211  0156  1281               	bcf	1,5	;volatile
  1212                           
  1213                           ;user.c: 49: OPTION_REGbits.T0SE=0;
  1214  0157  1201               	bcf	1,4	;volatile
  1215                           
  1216                           ;user.c: 50: OPTION_REGbits.nRBPU=0;
  1217  0158  1381               	bcf	1,7	;volatile
  1218                           
  1219                           ;user.c: 51: OPTION_REGbits.INTEDG=1;
  1220  0159  1701               	bsf	1,6	;volatile
  1221                           
  1222                           ;user.c: 56: PIE1bits.RCIE=1;
  1223  015A  168C               	bsf	12,5	;volatile
  1224                           
  1225                           ;user.c: 58: INTCONbits.PEIE=1;
  1226  015B  170B               	bsf	11,6	;volatile
  1227                           
  1228                           ;user.c: 60: INTCONbits.GIE=1;
  1229  015C  178B               	bsf	11,7	;volatile
  1230                           
  1231                           ;user.c: 63: if (PORTBbits.RB0==1){
  1232  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1233  015E  1C06               	btfss	6,0	;volatile
  1234  015F  2963               	goto	l104
  1235                           
  1236                           ;user.c: 64: OPTION_REGbits.INTEDG=0;
  1237  0160  1683               	bsf	3,5	;RP0=1, select bank1
  1238  0161  1301               	bcf	1,6	;volatile
  1239                           
  1240                           ;user.c: 65: }else{
  1241  0162  2965               	goto	l105
  1242  0163                     l104:	
  1243                           
  1244                           ;user.c: 66: OPTION_REGbits.INTEDG=1;
  1245  0163  1683               	bsf	3,5	;RP0=1, select bank1
  1246  0164  1701               	bsf	1,6	;volatile
  1247  0165                     l105:	
  1248                           
  1249                           ;user.c: 67: }
  1250                           ;user.c: 68: INTCONbits.INTF=0;
  1251  0165  108B               	bcf	11,1	;volatile
  1252                           
  1253                           ;user.c: 69: INTCONbits.INTE=1;
  1254  0166  160B               	bsf	11,4	;volatile
  1255  0167  0008               	return
  1256  0168                     __end_of_InitApp:	
  1257                           
  1258                           	psect	text7
  1259  0199                     __ptext7:	
  1260 ;; *************** function _ConfigureOscillator *****************
  1261 ;; Defined at:
  1262 ;;		line 18 in file "system.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;		None
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;		None               void
  1269 ;; Registers used:
  1270 ;;		None
  1271 ;; Tracked objects:
  1272 ;;		On entry : 17F/0
  1273 ;;		On exit  : 17F/20
  1274 ;;		Unchanged: 11F/0
  1275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1276 ;;      Params:         0       0       0       0
  1277 ;;      Locals:         0       0       0       0
  1278 ;;      Temps:          0       0       0       0
  1279 ;;      Totals:         0       0       0       0
  1280 ;;Total ram usage:        0 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    2
  1283 ;; This function calls:
  1284 ;;		Nothing
  1285 ;; This function is called by:
  1286 ;;		_main
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           
  1291                           ;psect for function _ConfigureOscillator
  1292  0199                     _ConfigureOscillator:	
  1293                           
  1294                           ;system.c: 20: PCONbits.OSCF=0;
  1295                           
  1296                           ;incstack = 0
  1297                           ; Regs used in _ConfigureOscillator: []
  1298  0199  1683               	bsf	3,5	;RP0=1, select bank1
  1299  019A  118E               	bcf	14,3	;volatile
  1300  019B  0008               	return
  1301  019C                     __end_of_ConfigureOscillator:	
  1302                           
  1303                           	psect	text8
  1304  0078                     __ptext8:	
  1305 ;; *************** function _isr *****************
  1306 ;; Defined at:
  1307 ;;		line 24 in file "interrupts.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;		None
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;  datosrecibid    1    5[COMMON] volatile unsigned char 
  1312 ;; Return value:  Size  Location     Type
  1313 ;;		None               void
  1314 ;; Registers used:
  1315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 60/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1321 ;;      Params:         0       0       0       0
  1322 ;;      Locals:         1       0       0       0
  1323 ;;      Temps:          5       0       0       0
  1324 ;;      Totals:         6       0       0       0
  1325 ;;Total ram usage:        6 bytes
  1326 ;; Hardware stack levels used:    1
  1327 ;; Hardware stack levels required when called:    1
  1328 ;; This function calls:
  1329 ;;		_getch
  1330 ;; This function is called by:
  1331 ;;		Interrupt level 1
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           
  1336                           ;psect for function _isr
  1337  0078                     _isr:	
  1338                           
  1339                           ;interrupts.c: 28: if(INTCONbits.INTF==1&&INTCONbits.INTE==1){
  1340  0078  188B               	btfsc	11,1	;volatile
  1341  0079  1E0B               	btfss	11,4	;volatile
  1342  007A  2883               	goto	i1l25
  1343                           
  1344                           ;interrupts.c: 39: TMR0=60;
  1345  007B  303C               	movlw	60
  1346  007C  1283               	bcf	3,5	;RP0=0, select bank0
  1347  007D  1303               	bcf	3,6	;RP1=0, select bank0
  1348  007E  0081               	movwf	1	;volatile
  1349                           
  1350                           ;interrupts.c: 40: INTCONbits.T0IF=0;
  1351  007F  110B               	bcf	11,2	;volatile
  1352                           
  1353                           ;interrupts.c: 41: INTCONbits.T0IE=1;
  1354  0080  168B               	bsf	11,5	;volatile
  1355                           
  1356                           ;interrupts.c: 44: INTCONbits.INTF=0;
  1357  0081  108B               	bcf	11,1	;volatile
  1358                           
  1359                           ;interrupts.c: 48: }else{
  1360  0082  28CC               	goto	i1l37
  1361  0083                     i1l25:	
  1362                           
  1363                           ;interrupts.c: 49: if (PIR1bits.RCIF){
  1364  0083  1283               	bcf	3,5	;RP0=0, select bank0
  1365  0084  1303               	bcf	3,6	;RP1=0, select bank0
  1366  0085  1E8C               	btfss	12,5	;volatile
  1367  0086  28A1               	goto	i1l27
  1368                           
  1369                           ;interrupts.c: 64: volatile unsigned char datosrecibidos;
  1370                           ;interrupts.c: 65: datosrecibidos=getch();
  1371  0087  219C               	fcall	_getch
  1372  0088  00F5               	movwf	isr@datosrecibidos	;volatile
  1373                           
  1374                           ;interrupts.c: 66: if (indice_de_dato<4){
  1375  0089  3004               	movlw	4
  1376  008A  0276               	subwf	_indice_de_dato,w
  1377  008B  1803               	skipnc
  1378  008C  2895               	goto	i1l28
  1379                           
  1380                           ;interrupts.c: 67: cadenarecibida[indice_de_dato]=datosrecibidos;
  1381  008D  0876               	movf	_indice_de_dato,w
  1382  008E  3E4E               	addlw	_cadenarecibida& (0+255)
  1383  008F  0084               	movwf	4
  1384  0090  0875               	movf	isr@datosrecibidos,w	;volatile
  1385  0091  1383               	bcf	3,7	;select IRP bank0
  1386  0092  0080               	movwf	0
  1387                           
  1388                           ;interrupts.c: 68: indice_de_dato++;
  1389  0093  0AF6               	incf	_indice_de_dato,f
  1390                           
  1391                           ;interrupts.c: 69: } else {
  1392  0094  2897               	goto	i1l1030
  1393  0095                     i1l28:	
  1394                           
  1395                           ;interrupts.c: 70: recibi_datos=1;
  1396  0095  01CD               	clrf	_recibi_datos
  1397  0096  0ACD               	incf	_recibi_datos,f
  1398  0097                     i1l1030:	
  1399                           
  1400                           ;interrupts.c: 71: }
  1401                           ;interrupts.c: 72: if (datosrecibidos=='\n'){
  1402  0097  0875               	movf	isr@datosrecibidos,w
  1403  0098  3A0A               	xorlw	10
  1404  0099  1903               	btfsc	3,2
  1405                           
  1406                           ;interrupts.c: 73: indice_de_dato=0;
  1407  009A  01F6               	clrf	_indice_de_dato
  1408                           
  1409                           ;interrupts.c: 74: }
  1410                           ;interrupts.c: 75: if (datosrecibidos=='\r'){
  1411  009B  0875               	movf	isr@datosrecibidos,w
  1412  009C  3A0D               	xorlw	13
  1413  009D  1D03               	skipz
  1414  009E  28CC               	goto	i1l37
  1415                           
  1416                           ;interrupts.c: 76: indice_de_dato=0;
  1417  009F  01F6               	clrf	_indice_de_dato
  1418  00A0  28CC               	goto	i1l37
  1419  00A1                     i1l27:	
  1420                           
  1421                           ;interrupts.c: 79: if(INTCONbits.T0IF){
  1422  00A1  1D0B               	btfss	11,2	;volatile
  1423  00A2  28CC               	goto	i1l37
  1424                           
  1425                           ;interrupts.c: 81: if (pasaron_20ms){
  1426  00A3  0877               	movf	_pasaron_20ms,w
  1427  00A4  1903               	btfsc	3,2
  1428  00A5  28C7               	goto	i1l34
  1429                           
  1430                           ;interrupts.c: 82: if(RB0==OPTION_REGbits.INTEDG){
  1431  00A6  1683               	bsf	3,5	;RP0=1, select bank1
  1432  00A7  0E01               	swapf	1,w	;volatile
  1433  00A8  00F0               	movwf	??_isr
  1434  00A9  0CF0               	rrf	??_isr,f
  1435  00AA  0C70               	rrf	??_isr,w
  1436  00AB  3901               	andlw	1
  1437  00AC  00F1               	movwf	??_isr+1
  1438  00AD  3000               	movlw	0
  1439  00AE  1283               	bcf	3,5	;RP0=0, select bank0
  1440  00AF  1806               	btfsc	6,0	;volatile
  1441  00B0  3001               	movlw	1
  1442  00B1  0671               	xorwf	??_isr+1,w
  1443  00B2  1D03               	skipz
  1444  00B3  28C4               	goto	i1l1050
  1445                           
  1446                           ;interrupts.c: 83: OPTION_REGbits.INTEDG= !OPTION_REGbits.INTEDG;
  1447  00B4  1003               	clrc
  1448  00B5  1683               	bsf	3,5	;RP0=1, select bank1
  1449  00B6  1F01               	btfss	1,6	;volatile
  1450  00B7  1403               	setc
  1451  00B8  1683               	bsf	3,5	;RP0=1, select bank1
  1452  00B9  1303               	bcf	3,6	;RP1=0, select bank1
  1453  00BA  1C03               	btfss	3,0
  1454  00BB  28BE               	goto	L2
  1455  00BC  1701               	bsf	1,6	;volatile
  1456  00BD  28BF               	goto	i1l1044
  1457  00BE                     L2:	
  1458  00BE  1301               	bcf	1,6	;volatile
  1459  00BF                     i1l1044:	
  1460                           
  1461                           ;interrupts.c: 84: Bandera_estado_llave=1;
  1462  00BF  1283               	bcf	3,5	;RP0=0, select bank0
  1463  00C0  01CC               	clrf	_Bandera_estado_llave
  1464  00C1  0ACC               	incf	_Bandera_estado_llave,f
  1465                           
  1466                           ;interrupts.c: 85: INTCONbits.INTF=0;
  1467  00C2  108B               	bcf	11,1	;volatile
  1468                           
  1469                           ;interrupts.c: 86: INTCONbits.INTE=1;
  1470  00C3  160B               	bsf	11,4	;volatile
  1471  00C4                     i1l1050:	
  1472                           
  1473                           ;interrupts.c: 87: }
  1474                           ;interrupts.c: 88: pasaron_20ms=0;
  1475  00C4  01F7               	clrf	_pasaron_20ms
  1476                           
  1477                           ;interrupts.c: 89: INTCONbits.T0IE=0;
  1478  00C5  128B               	bcf	11,5	;volatile
  1479                           
  1480                           ;interrupts.c: 91: }
  1481  00C6  28C9               	goto	i1l1054
  1482  00C7                     i1l34:	
  1483                           
  1484                           ;interrupts.c: 92: else {
  1485                           ;interrupts.c: 93: pasaron_20ms=1;
  1486  00C7  01F7               	clrf	_pasaron_20ms
  1487  00C8  0AF7               	incf	_pasaron_20ms,f
  1488  00C9                     i1l1054:	
  1489                           
  1490                           ;interrupts.c: 95: }
  1491                           ;interrupts.c: 96: TMR0=60;
  1492  00C9  303C               	movlw	60
  1493  00CA  0081               	movwf	1	;volatile
  1494                           
  1495                           ;interrupts.c: 97: INTCONbits.T0IF=0;
  1496  00CB  110B               	bcf	11,2	;volatile
  1497  00CC                     i1l37:	
  1498  00CC  0874               	movf	??_isr+4,w
  1499  00CD  008A               	movwf	10
  1500  00CE  0873               	movf	??_isr+3,w
  1501  00CF  0084               	movwf	4
  1502  00D0  0E72               	swapf	(??_isr+2)^(0+-128),w
  1503  00D1  0083               	movwf	3
  1504  00D2  0EFE               	swapf	126,f
  1505  00D3  0E7E               	swapf	126,w
  1506  00D4  0009               	retfie
  1507  00D5                     __end_of_isr:	
  1508                           
  1509                           	psect	intentry
  1510  0004                     __pintentry:	
  1511                           ;incstack = 0
  1512                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1513                           
  1514  0004                     interrupt_function:	
  1515  007E                     saved_w	set	btemp
  1516  0004  00FE               	movwf	btemp
  1517  0005  0E03               	swapf	3,w
  1518  0006  00F2               	movwf	??_isr+2
  1519  0007  0804               	movf	4,w
  1520  0008  00F3               	movwf	??_isr+3
  1521  0009  080A               	movf	10,w
  1522  000A  00F4               	movwf	??_isr+4
  1523  000B  2878               	ljmp	_isr
  1524                           
  1525                           	psect	text9
  1526  019C                     __ptext9:	
  1527 ;; *************** function _getch *****************
  1528 ;; Defined at:
  1529 ;;		line 69 in file "usart1.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;		None
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;		None
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  1    wreg      unsigned char 
  1536 ;; Registers used:
  1537 ;;		wreg
  1538 ;; Tracked objects:
  1539 ;;		On entry : 60/0
  1540 ;;		On exit  : 60/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1543 ;;      Params:         0       0       0       0
  1544 ;;      Locals:         0       0       0       0
  1545 ;;      Temps:          0       0       0       0
  1546 ;;      Totals:         0       0       0       0
  1547 ;;Total ram usage:        0 bytes
  1548 ;; Hardware stack levels used:    1
  1549 ;; This function calls:
  1550 ;;		Nothing
  1551 ;; This function is called by:
  1552 ;;		_isr
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           
  1557                           ;psect for function _getch
  1558  019C                     _getch:	
  1559                           
  1560                           ;usart1.c: 70: return RCREG;
  1561                           
  1562                           ;incstack = 0
  1563                           ; Regs used in _getch: [wreg]
  1564  019C  081A               	movf	26,w	;volatile
  1565  019D  0008               	return
  1566  019E                     __end_of_getch:	
  1567  007E                     btemp	set	126	;btemp
  1568  007E                     wtemp	set	126
  1569  007E                     wtemp0	set	126
  1570  0080                     wtemp1	set	128
  1571  0082                     wtemp2	set	130
  1572  0084                     wtemp3	set	132
  1573  0086                     wtemp4	set	134
  1574  0088                     wtemp5	set	136
  1575  007F                     wtemp6	set	127
  1576  007E                     ttemp	set	126
  1577  007E                     ttemp0	set	126
  1578  0081                     ttemp1	set	129
  1579  0084                     ttemp2	set	132
  1580  0087                     ttemp3	set	135
  1581  007F                     ttemp4	set	127
  1582  007E                     ltemp	set	126
  1583  007E                     ltemp0	set	126
  1584  0082                     ltemp1	set	130
  1585  0086                     ltemp2	set	134
  1586  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       8
    BANK0            80     44      52
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 6
		 -> cadenarecibida(BANK0[6]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 6
		 -> cadenarecibida(BANK0[6]), 

    calcula_CRC16@datos	PTR unsigned char  size(1) Largest target is 6
		 -> cadenarecibida(BANK0[6]), 

    calcula_mensaje_crc@packet_ptr	PTR unsigned char  size(1) Largest target is 6
		 -> cadenarecibida(BANK0[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_calcula_mensaje_crc
    _calcula_mensaje_crc->_calcula_CRC16
    _calcula_CRC16->_CRC16

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1210
                                             42 BANK0      2     2      0
                _ConfigureOscillator
                            _InitApp
                _calcula_mensaje_crc
                    _configura_USART
 ---------------------------------------------------------------------------------
 (1) _configura_USART                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _calcula_mensaje_crc                                  6     3      3    1210
                                             36 BANK0      6     3      3
                      _calcula_CRC16
 ---------------------------------------------------------------------------------
 (2) _calcula_CRC16                                       15     7      8    1103
                                             21 BANK0     15     7      8
                              _CRC16
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     2      3     172
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _CRC16                                               21     9     12     376
                                              0 BANK0     21     9     12
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  6     6      0      67
                                              0 COMMON     6     6      0
                              _getch
 ---------------------------------------------------------------------------------
 (5) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _calcula_mensaje_crc
     _calcula_CRC16
       _CRC16
       _strlen
   _configura_USART

 _isr (ROOT)
   _getch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     2C      34       3       65.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      3C      10        0.0%


Microchip Technology PIC Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Sun Jun  8 19:01:15 2014

                  __CFG_CP$OFF 0000                            l104 0163                            l105 0165  
                          l155 00E6                            l902 00F6                            l904 00FB  
                          _RB0 0030                            u213 0113                            u405 0024  
                 __CFG_CPD$OFF 0000                            u447 012C                            _isr 0078  
                          fsr0 0004                            indf 0000                   __CFG_LVP$OFF 0000  
             ?_configura_USART 0070                           l1230 0139                           l1224 0133  
                         l1170 0180                           l1330 006E                           l1172 0188  
                         l1332 0069                           l1182 001C                           l1328 0064  
                         l1192 0073                           l1184 004C                           ?_isr 0070  
                         i1l25 0083                           i1l34 00C7                           i1l27 00A1  
                         i1l28 0095                           i1l37 00CC                           _TMR0 0001  
                         _main 0126                           btemp 007E                  __CFG_BOREN$ON 0000  
                         ltemp 007E                           start 000C                           ttemp 007E  
                         wtemp 007E                  __CFG_MCLRE$ON 0000               calcula_CRC16@aux 003F  
              __end_of_InitApp 0168                          ??_isr 0070                          ?_main 0070  
                        _CRC16 00D5                  __CFG_WDTE$OFF 0000                          _CMCON 001F  
                        _RCREG 001A                          _SPBRG 0099                          _PORTA 0005  
                        _PORTB 0006                          _TRISA 0085                          _TRISB 0086  
          _ConfigureOscillator 0199                  __CFG_PWRTE$ON 0000           _Bandera_estado_llave 004C  
                        _getch 019C                          pclath 000A                          ltemp0 007E  
                        ltemp1 0082                          ltemp2 0086                          ltemp3 0080  
                        ttemp0 007E                          ttemp1 0081                          ttemp2 0084  
                        ttemp3 0087                          ttemp4 007F                          status 0003  
                        wtemp0 007E                          wtemp1 0080                          wtemp2 0082  
                        wtemp3 0084                          wtemp4 0086                          wtemp5 0088  
                        wtemp6 007F           ?_ConfigureOscillator 0070                __initialization 000D  
                 __end_of_main 0147                         CRC16@i 002D                         ??_main 004A  
                       ?_CRC16 0020                         ?_getch 0070                         i1l1030 0097  
                       i1l1050 00C4                         i1l1044 00BF                         i1l1054 00C9  
                    CRC16@poly 0020                      ??_InitApp 0076          ??_ConfigureOscillator 0076  
                       _strlen 017E                         saved_w 007E                 _indice_de_dato 0076  
      __end_of__initialization 0017                  __end_of_CRC16 0126                 calcula_CRC16@i 0041  
               __pcstackCOMMON 0070             calcula_CRC16@datos 0043                  __end_of_getch 019E  
                      ??_CRC16 0076  calcula_mensaje_crc@packet_ptr 0049                 _OPTION_REGbits 0081  
                      ??_getch 0070    __end_of_calcula_mensaje_crc 017E                     __pbssBANK0 004C  
       __size_of_calcula_CRC16 005F                     __pmaintext 0126                     __pintentry 0004  
                      ?_strlen 0020                     CRC16@value 002C                        _InitApp 0147  
     __size_of_configura_USART 000A                        __ptext0 0000                        __ptext1 018F  
                      __ptext2 0168                        __ptext3 0019                        __ptext4 017E  
                      __ptext5 00D5                        __ptext6 0147                        __ptext7 0199  
                      __ptext8 0078                        __ptext9 019C                __size_of_strlen 0011  
                 __size_of_isr 005D                  _calcula_CRC16 0019           end_of_initialization 0017  
       calcula_CRC16@polinomio 0035                      _RCSTAbits 0018                        strlen@s 0023  
                    _PORTBbits 0006                 ?_calcula_CRC16 0035    __end_of_ConfigureOscillator 019C  
                    _TXSTAbits 0098         calcula_mensaje_crc@CRC 0047              ??_configura_USART 0076  
          calcula_CRC16@inival 0039                 __end_of_strlen 018F            start_initialization 000D  
                  __end_of_isr 00D5                       CRC16@res 0031                 _cadenarecibida 004E  
              CRC16@init_value 0024                CRC16@exit_value 0028                       ??_strlen 0076  
              ??_calcula_CRC16 003D                    __pbssCOMMON 0076                      ___latbits 0000  
                __pcstackBANK0 0020   __size_of_calcula_mensaje_crc 0016                       ?_InitApp 0070  
               __size_of_CRC16 0051                 __size_of_getch 0002                   _recibi_datos 004D  
                 _pasaron_20ms 0077              interrupt_function 0004                       _PIE1bits 008C  
                     _PCONbits 008E                       _PIR1bits 000C                _configura_USART 018F  
             __size_of_InitApp 0021                  __size_of_main 0021   __size_of_ConfigureOscillator 0003  
          _calcula_mensaje_crc 0168                     _INTCONbits 000B        __end_of_configura_USART 0199  
                     intlevel1 0000           ?_calcula_mensaje_crc 0044          __end_of_calcula_CRC16 0078  
                     strlen@cp 0024             __CFG_FOSC$INTOSCIO 0000              isr@datosrecibidos 0075  
        ??_calcula_mensaje_crc 0076  
